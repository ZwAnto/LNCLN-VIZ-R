mode(T)
d <- Sys.Date()
class(d)
all(c(T,T,T))
all(c(T,T,F))
any(c(T,T,F))
dput()
dput(c('a','a'))
stderr()
Sys.getlocale()
month.abb()
month.abb
months()
months
month.name
######################################################################### #
#                                                                         #
#   Projet    : CHALLENGE DATAVIS Lincoln                                 #
#   Programme : Programme principal                                       #
#   Auteur    : AHM                                                       #
#   Date      :                                                           #
#                                                                         #
######################################################################### #
# Working directory -------------------------------------------------------
setwd('E:/Challenge OpenDataParis/')
# Fun ---------------------------------------------------------------------
lapply(list.files('fun',pattern = '[.](r|R)$',full.names = T),source)
# Packages ----------------------------------------------------------------
# install.packages(c('geojsonio','rgdal','ggplot2','sp','data.table','doParallel','foreach','rgeos','leaflet','geojsonlint'))
library(rgdal)
library(sp)
library(ggplot2)
library(data.table)
library(rgeos)
library(leaflet)
library(reshape2)
library(geojsonio)
library(jsonlite)
# Liens -------------------------------------------------------------------
# https://opendata.paris.fr/explore/dataset/zones-touristiques-internationales/
# Base --------------------------------------------------------------------
# Iris
load('data/iris.RData')
# Tri mobile
source('scripts/importation/triMobile.R')
# Mobilier
source('scripts/importation/mobilierparis2011.R')
# dans ma rue
source('scripts/importation/dans-ma-rue.R',encoding = 'UTF-8')
# Tonnage
source('scripts/importation/tonnage.R',encoding = 'UTF-8')
# Color vector
colors <- c('#1F363D','#40798C','#70A9A1','#9EC1A3','#CFE0C3')
colors_r <- rev(colors)
# Affecting iris to tri Mobile --------------------------------------------
coords <- as.matrix(triMobile[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
triMobile$code_iris <- iris$code_iris[check]
# Affecting iris to mobilier --------------------------------------
coords <- as.matrix(mobilier[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
mobilier$code_iris <- iris$code_iris[check]
#' Si on veut rajouter les poubelle hors des limites de paris
#' Affectation ? l'IRIS la plus proche
# coords <- as.matrix(mobilier[is.na(CODE_IRIS),.(as.numeric(lon),as.numeric(lat))])
# points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
#
# check <- gDistance(iris,points,byid = T)
# check <- apply(check,1,which.min)
#
# mobilier[is.na(CODE_IRIS), CODE_IRIS := iris$CODE_IRIS[check]]
mobilier <- mobilier[!is.na(code_iris),]
# Affecting iris to dans ma rue -----------------------------------
coords <- as.matrix(dansMaRue[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
dansMaRue$code_iris <- iris$code_iris[check]
dansMaRue <- dansMaRue[!is.na(code_iris),]
# Affecting iris to trilib ------------------------------------------------
coords <- as.matrix(trilib[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
trilib$code_iris <- iris$code_iris[check]
# Creating insee_com ------------------------------------------------------
triMobile[, insee_com := substr(code_iris,1,5)]
mobilier[, insee_com := substr(code_iris,1,5)]
dansMaRue[, insee_com := substr(code_iris,1,5)]
# JSON Generation ---------------------------------------------------------
setwd('C:/Users/AntoH/Documents/GitHub/lncln-viz-r/')
setwd('C:/Users/AntoH/Documents/GitHub/lncln-viz-r/')
lapply(list.files('fun',pattern = '[.](r|R)$',full.names = T),source)
# install.packages(c('geojsonio','rgdal','ggplot2','sp','data.table','doParallel','foreach','rgeos','leaflet','geojsonlint'))
library(rgdal)
library(sp)
library(ggplot2)
library(data.table)
library(rgeos)
library(leaflet)
library(reshape2)
library(geojsonio)
library(jsonlite)
# Liens -------------------------------------------------------------------
# https://opendata.paris.fr/explore/dataset/zones-touristiques-internationales/
# Base --------------------------------------------------------------------
# Iris
load('data/iris.RData')
# Tri mobile
source('scripts/importation/triMobile.R')
# Mobilier
source('scripts/importation/mobilierparis2011.R')
# dans ma rue
source('scripts/importation/dans-ma-rue.R',encoding = 'UTF-8')
# Tonnage
source('scripts/importation/tonnage.R',encoding = 'UTF-8')
# Color vector
colors <- c('#1F363D','#40798C','#70A9A1','#9EC1A3','#CFE0C3')
colors_r <- rev(colors)
# Affecting iris to tri Mobile --------------------------------------------
coords <- as.matrix(triMobile[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
triMobile$code_iris <- iris$code_iris[check]
# Affecting iris to mobilier --------------------------------------
coords <- as.matrix(mobilier[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
mobilier$code_iris <- iris$code_iris[check]
#' Si on veut rajouter les poubelle hors des limites de paris
#' Affectation ? l'IRIS la plus proche
# coords <- as.matrix(mobilier[is.na(CODE_IRIS),.(as.numeric(lon),as.numeric(lat))])
# points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
#
# check <- gDistance(iris,points,byid = T)
# check <- apply(check,1,which.min)
#
# mobilier[is.na(CODE_IRIS), CODE_IRIS := iris$CODE_IRIS[check]]
mobilier <- mobilier[!is.na(code_iris),]
# Affecting iris to dans ma rue -----------------------------------
coords <- as.matrix(dansMaRue[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
dansMaRue$code_iris <- iris$code_iris[check]
dansMaRue <- dansMaRue[!is.na(code_iris),]
# Affecting iris to trilib ------------------------------------------------
coords <- as.matrix(trilib[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
trilib$code_iris <- iris$code_iris[check]
# Creating insee_com ------------------------------------------------------
triMobile[, insee_com := substr(code_iris,1,5)]
mobilier[, insee_com := substr(code_iris,1,5)]
dansMaRue[, insee_com := substr(code_iris,1,5)]
# JSON Generation ---------------------------------------------------------
a <- jsonlite::read_json('./Data/ville_ideale_sal.geojson')
library(data.table)
out <- list()
for (i in 1:20){
out[[i]] <- as.data.table(a$features[[i]][[2]])
}
villeIdeale <- rbindlist(out)
villeIdeale <- villeIdeale[, .(insee,n_coms_sale,n_coms,prop,is_crotte,is_poubelle,is_sale)]
villeIdeale[,insee_com := paste(insee) ]
villeIdeale[, insee := NULL]
villeIdeale[, prop := prop * 100]
villeIdeale
source('scripts/generation/gen_iris_geojson.R',encoding = 'UTF-8')
source('scripts/generation/gen_arr_geojson.R',encoding = 'UTF-8')
villeIdeale
villeIdeale[, is_crotte := is_crotte / n_coms *100]
villeIdeale[, is_poubelle := is_poubelle / n_coms *100]
villeIdeale[, is_sale := is_sale / n_coms *100]
villeIdeale
source('scripts/generation/gen_iris_geojson.R',encoding = 'UTF-8')
source('scripts/generation/gen_arr_geojson.R',encoding = 'UTF-8')
######################################################################### #
#                                                                         #
#   Projet    : CHALLENGE DATAVIS Lincoln                                 #
#   Programme : Programme principal                                       #
#   Auteur    : AHM                                                       #
#   Date      :                                                           #
#                                                                         #
######################################################################### #
# Working directory -------------------------------------------------------
setwd('C:/Users/AntoH/Documents/GitHub/lncln-viz-r/')
# Fun ---------------------------------------------------------------------
lapply(list.files('fun',pattern = '[.](r|R)$',full.names = T),source)
# Packages ----------------------------------------------------------------
# install.packages(c('geojsonio','rgdal','ggplot2','sp','data.table','doParallel','foreach','rgeos','leaflet','geojsonlint'))
library(rgdal)
library(sp)
library(ggplot2)
library(data.table)
library(rgeos)
library(leaflet)
library(reshape2)
library(geojsonio)
library(jsonlite)
# Liens -------------------------------------------------------------------
# https://opendata.paris.fr/explore/dataset/zones-touristiques-internationales/
# Base --------------------------------------------------------------------
# Iris
load('data/iris.RData')
# Tri mobile
source('scripts/importation/triMobile.R')
# Mobilier
source('scripts/importation/mobilierparis2011.R')
# dans ma rue
source('scripts/importation/dans-ma-rue.R',encoding = 'UTF-8')
# Tonnage
source('scripts/importation/tonnage.R',encoding = 'UTF-8')
# Color vector
colors <- c('#1F363D','#40798C','#70A9A1','#9EC1A3','#CFE0C3')
colors_r <- rev(colors)
# Affecting iris to tri Mobile --------------------------------------------
coords <- as.matrix(triMobile[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
triMobile$code_iris <- iris$code_iris[check]
# Affecting iris to mobilier --------------------------------------
coords <- as.matrix(mobilier[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
mobilier$code_iris <- iris$code_iris[check]
#' Si on veut rajouter les poubelle hors des limites de paris
#' Affectation ? l'IRIS la plus proche
# coords <- as.matrix(mobilier[is.na(CODE_IRIS),.(as.numeric(lon),as.numeric(lat))])
# points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
#
# check <- gDistance(iris,points,byid = T)
# check <- apply(check,1,which.min)
#
# mobilier[is.na(CODE_IRIS), CODE_IRIS := iris$CODE_IRIS[check]]
mobilier <- mobilier[!is.na(code_iris),]
# Affecting iris to dans ma rue -----------------------------------
coords <- as.matrix(dansMaRue[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
dansMaRue$code_iris <- iris$code_iris[check]
dansMaRue <- dansMaRue[!is.na(code_iris),]
# Affecting iris to trilib ------------------------------------------------
coords <- as.matrix(trilib[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
trilib$code_iris <- iris$code_iris[check]
# Creating insee_com ------------------------------------------------------
triMobile[, insee_com := substr(code_iris,1,5)]
mobilier[, insee_com := substr(code_iris,1,5)]
dansMaRue[, insee_com := substr(code_iris,1,5)]
# JSON Generation ---------------------------------------------------------
source('scripts/generation/gen_iris_geojson.R',encoding = 'UTF-8')
source('scripts/generation/gen_arr_geojson.R',encoding = 'UTF-8')
######################################################################### #
#                                                                         #
#   Projet    : CHALLENGE DATAVIS Lincoln                                 #
#   Programme : Programme principal                                       #
#   Auteur    : AHM                                                       #
#   Date      :                                                           #
#                                                                         #
######################################################################### #
# Working directory -------------------------------------------------------
setwd('C:/Users/AntoH/Documents/GitHub/lncln-viz-r/')
# Fun ---------------------------------------------------------------------
lapply(list.files('fun',pattern = '[.](r|R)$',full.names = T),source)
# Packages ----------------------------------------------------------------
# install.packages(c('geojsonio','rgdal','ggplot2','sp','data.table','doParallel','foreach','rgeos','leaflet','geojsonlint'))
library(rgdal)
library(sp)
library(ggplot2)
library(data.table)
library(rgeos)
library(leaflet)
library(reshape2)
library(geojsonio)
library(jsonlite)
# Liens -------------------------------------------------------------------
# https://opendata.paris.fr/explore/dataset/zones-touristiques-internationales/
# Base --------------------------------------------------------------------
# Iris
load('data/iris.RData')
# Tri mobile
source('scripts/importation/triMobile.R')
# Mobilier
source('scripts/importation/mobilierparis2011.R')
# dans ma rue
source('scripts/importation/dans-ma-rue.R',encoding = 'UTF-8')
# Tonnage
source('scripts/importation/tonnage.R',encoding = 'UTF-8')
# VilleIdeale
source('scripts/importation/ville-ideale.R',encoding = 'UTF-8')
# Color vector
colors <- c('#1F363D','#40798C','#70A9A1','#9EC1A3','#CFE0C3')
colors_r <- rev(colors)
# Affecting iris to tri Mobile --------------------------------------------
coords <- as.matrix(triMobile[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
triMobile$code_iris <- iris$code_iris[check]
# Affecting iris to mobilier --------------------------------------
coords <- as.matrix(mobilier[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
mobilier$code_iris <- iris$code_iris[check]
#' Si on veut rajouter les poubelle hors des limites de paris
#' Affectation ? l'IRIS la plus proche
# coords <- as.matrix(mobilier[is.na(CODE_IRIS),.(as.numeric(lon),as.numeric(lat))])
# points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
#
# check <- gDistance(iris,points,byid = T)
# check <- apply(check,1,which.min)
#
# mobilier[is.na(CODE_IRIS), CODE_IRIS := iris$CODE_IRIS[check]]
mobilier <- mobilier[!is.na(code_iris),]
# Affecting iris to dans ma rue -----------------------------------
coords <- as.matrix(dansMaRue[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
dansMaRue$code_iris <- iris$code_iris[check]
dansMaRue <- dansMaRue[!is.na(code_iris),]
# Affecting iris to trilib ------------------------------------------------
coords <- as.matrix(trilib[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
trilib$code_iris <- iris$code_iris[check]
# Creating insee_com ------------------------------------------------------
triMobile[, insee_com := substr(code_iris,1,5)]
mobilier[, insee_com := substr(code_iris,1,5)]
dansMaRue[, insee_com := substr(code_iris,1,5)]
# JSON Generation ---------------------------------------------------------
source('scripts/generation/gen_iris_geojson.R',encoding = 'UTF-8')
source('scripts/generation/gen_arr_geojson.R',encoding = 'UTF-8')
