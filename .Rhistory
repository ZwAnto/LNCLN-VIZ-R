help.start()
help.search("mean")
search()
.packages()
.packages()
a <- .packages()
a
pacman::p_load(minpack.lm)
set.seed(2222)
library(minpack.lm)
install.packages('minpack.lm')
library(minpack.lm)
set.seed(2222)
# adstock function
adstock<-function(x,rate=0){
return(as.numeric(stats::filter(x=x,filter=rate,method="recursive")))
}
n_weeks = 104
base = 50
ad1 = sapply(rnorm(n_weeks, mean = 20, sd = 10), function(x) round(max(x, 0), 0))
ad2 = sapply(rnorm(n_weeks, mean = 20, sd = 10), function(x) round(max(x, 0), 0))
ad3 = sapply(rnorm(n_weeks, mean = 20, sd = 10), function(x) round(max(x, 0), 0))
ad1
plot(ad1)
ad1_rate = .7
ad2_rate = .4
ad3_rate = .5
ad1[ad1<30] = 0
ad1[ad1<30] = 0
ad2[ad2<30] = 0
ad3[ad3<30] = 0
plot(ad1,type="l")
lines(ad2,col='red')
# adstock rates
ad1_rate = .7
ad2_rate = .4
ad3_rate = .5
round(base+
1.2*(adstock(ad2, ad2_rate)>0)*adstock(ad1, ad1_rate)+
(adstock(ad2, ad2_rate)==0)*adstock(ad1, ad1_rate)+
1.5*(adstock(ad1, ad1_rate)>0)*adstock(ad2, ad2_rate)+
(adstock(ad1, ad1_rate)==0)*adstock(ad2, ad2_rate)+
rnorm(n_weeks, sd = 5),
0)
sales=
round(base+
1.2*(adstock(ad2, ad2_rate)>0)*adstock(ad1, ad1_rate)+
(adstock(ad2, ad2_rate)==0)*adstock(ad1, ad1_rate)+
1.5*(adstock(ad1, ad1_rate)>0)*adstock(ad2, ad2_rate)+
(adstock(ad1, ad1_rate)==0)*adstock(ad2, ad2_rate)+
rnorm(n_weeks, sd = 5),
0)
plot(sales)
plot(sales,type='l')
library(minpack.lm)
set.seed(2222)
# adstock function
adstock<-function(x,rate=0){
return(as.numeric(stats::filter(x=x,filter=rate,method="recursive")))
}
# generate base (intercept) + noise, and random values for ad1, ad2, and ad3
n_weeks = 104
base = 50
ad1 = sapply(rnorm(n_weeks, mean = 20, sd = 10), function(x) round(max(x, 0), 0))
ad2 = sapply(rnorm(n_weeks, mean = 20, sd = 10), function(x) round(max(x, 0), 0))
ad3 = sapply(rnorm(n_weeks, mean = 20, sd = 10), function(x) round(max(x, 0), 0))
# adstock rates
ad1_rate = .7
ad2_rate = .4
ad3_rate = .5
# generate sales data from the base + ad vairables w/ ad stocking, with random noise
sales = round(base + adstock(ad1, ad1_rate) + adstock(ad2, ad2_rate) + adstock(ad3, ad3_rate) + rnorm(n_weeks, sd = 5), 0)
Impact = sales
Ads = data.frame(ad1, ad2, ad3 )
maxiter = 100
params = letters[2:(ncol(Ads)+1)]
params
ads = paste0("ad_", params)
ads
rates = paste0("rate_", params)
rates
param_fm = paste(
paste(params, "*adstock(", ads,  ",", rates, ")", sep = ""),
collapse = " + "
)
param_fm
fm = as.formula(paste("Impact ~ a +", param_fm))
start = c(rep(1, length(params) + 1), rep(.1, length(rates)))
names(start) = c("a", params, rates)
start
Ads_df = Ads
names(Ads_df) = ads
Data = cbind(Impact, Ads_df)
modFit  0)){
library(minpack.lm)
lower = c(rep(-Inf, length(params) + 1), rep(0, length(rates)))
upper = c(rep(Inf, length(params) + 1), rep(1, length(rates)))
modFit <- nlsLM(fm, data = Data, start = start,
lower = lower, upper = upper,
control = nls.lm.control(maxiter = maxiter))
}
library(minpack.lm)
lower = c(rep(-Inf, length(params) + 1), rep(0, length(rates)))
upper = c(rep(Inf, length(params) + 1), rep(1, length(rates)))
modFit <- nlsLM(fm, data = Data, start = start,
lower = lower, upper = upper,
control = nls.lm.control(maxiter = maxiter))
AdstockInt = round(summary(modFit)$coefficients[1, 1])
AdstockCoef = round(summary(modFit)$coefficients[params, 1], 2)
AdstockRate = round(summary(modFit)$coefficients[rates, 1], 2)
AdstockRate
AdstockCoef
AdstockInt
param_fm_coefs = paste(
paste(round(AdstockCoef, 2), " * adstock(", names(Ads),  ", ", round(AdstockRate, 2), ")", sep = ""),
collapse = " + "
)
fm_coefs = as.formula(paste("Impact ~ ", AdstockInt, " +", param_fm_coefs))
# rename rates with original variable names
names(AdstockRate) = paste0("rate_", names(Ads))
# calculate percent error
mape = mean(abs((Impact-predict(modFit))/Impact) * 100)
list(fm = fm_coefs, base = AdstockInt, rates = AdstockRate, mape = mape)
sales = round(base +
1.1*(adstock(ad2, ad2_rate)>0)*adstock(ad1, ad1_rate) + (adstock(ad2, ad2_rate)==0)*adstock(ad1, ad1_rate) +
1.05*(adstock(ad1, ad1_rate)>0)*adstock(ad2, ad2_rate) + (adstock(ad1, ad1_rate)==0)*adstock(ad2, ad2_rate) +
rnorm(n_weeks, sd = 5), 0)
Ads = data.frame(ad1, ad2
Ads = data.frame(ad1, ad2)
params = letters[2:(ncol(Ads)+1)]
params
ads = paste0("ad_", params)
# rate variables
rates = paste0("rate_", params)
# create partial formula
rates
params
param_fm = paste(
paste(params, "*adstock(", ads,  ",", rates, ")", sep = ""),
collapse = " + "
)
param_fm
ad1
runif(n = 20, min = 0, max = 15)
round(runif(n = 20, min = 0, max = 15))
sort(round(runif(n = 20, min = 0, max = 15)))
read.csv('../Downloads/NYC_Transit_Subway_Entrance_And_Exit_Data.csv')
library(data.table)
fread('../Downloads/NYC_Transit_Subway_Entrance_And_Exit_Data.csv')
library(data.table)
install.packages('data.table')
library(data.table)
db <- fread('../Downloads/NYC_Transit_Subway_Entrance_And_Exit_Data.csv')
db
unique(db[,.(state.name,line,`Station Location`)])
make.names(names(db))
names(db) <- make.names(names(db))
unique(db[,.(state.name,line,Statio. Location)])
unique(db[,.(state.name,line,Station.Location)])
unique(db[,.(Station.Name,line,Station.Location)])
unique(db[,.(Station.Name,Line,Station.Location)])
a <- data.frame(a = c(0,1,2,3), b = c(10,2,4,5,7))
a <- data.frame(a = c(0,1,2,3,6), b = c(10,2,4,5,7))
solve(a)
a <- data.frame(a, a)
a <- a[1:4,]
det(a)
eigen(a)
solve(a)
a <- factor(c(1,23,5))
attributes(a)
attributes()
month.name
setwd('E:/Challenge OpenDataParis/')
######################################################################### #
#                                                                         #
#   Projet    : CHALLENGE DATAVIS Lincoln                                 #
#   Programme : Programme principal                                       #
#   Auteur    : AHM                                                       #
#   Date      :                                                           #
#                                                                         #
######################################################################### #
# Working directory -------------------------------------------------------
setwd('E:/Challenge OpenDataParis/')
# Fun ---------------------------------------------------------------------
lapply(list.files('fun',pattern = '[.](r|R)$',full.names = T),source)
# Packages ----------------------------------------------------------------
# install.packages(c('rgdal','ggplot2','sp','data.table','doParallel','foreach','rgeos','leaflet'))
library(rgdal)
library(sp)
library(ggplot2)
library(data.table)
library(rgeos)
library(leaflet)
library(reshape2)
# Liens -------------------------------------------------------------------
# https://opendata.paris.fr/explore/dataset/zones-touristiques-internationales/
# Donnée arrondissements: https://opendata.paris.fr/explore/dataset/arrondissements/table/?location=12,48.85139,2.35983
# Base --------------------------------------------------------------------
# Iris
load('data/iris.RData')
# Tri mobile
source('scripts/triMobile.R')
# Mobilier
source('scripts/mobilierparis2011.R')
# dans ma rue
source('scripts/dans-ma-rue.R',encoding = 'UTF-8')
source('scripts/tonnage.R',encoding = 'UTF-8')
coords <- as.matrix(triMobile[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
triMobile$CODE_IRIS <- iris$CODE_IRIS[check]
# Affecting iris to mobilier --------------------------------------
coords <- as.matrix(mobilier[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
mobilier$CODE_IRIS <- iris$CODE_IRIS[check]
#' Si on veut rajouter les poubelle hors des limites de paris
#' Affectation à l'IRIS la plus proche
# coords <- as.matrix(mobilier[is.na(CODE_IRIS),.(as.numeric(lon),as.numeric(lat))])
# points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
#
# check <- gDistance(iris,points,byid = T)
# check <- apply(check,1,which.min)
#
# mobilier[is.na(CODE_IRIS), CODE_IRIS := iris$CODE_IRIS[check]]
mobilier <- mobilier[!is.na(CODE_IRIS),]
# Affecting iris to dans ma rue -----------------------------------
coords <- as.matrix(dansMaRue[,.(as.numeric(lon),as.numeric(lat))])
points <- SpatialPoints(coords,CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
check <- gContains(iris,points,byid = T)
check <- apply(check,1,which)
check <- sapply(check,function(x){
if (!length(x)){
return(NA)
}
return(x)
})
dansMaRue$CODE_IRIS <- iris$CODE_IRIS[check]
dansMaRue <- dansMaRue[!is.na(CODE_IRIS),]
# Arr ---------------------------------------------------------------------
triMobile[, INSEE_COM := substr(CODE_IRIS,1,5)]
mobilier[, INSEE_COM := substr(CODE_IRIS,1,5)]
dansMaRue[, INSEE_COM := substr(CODE_IRIS,1,5)]
triMobileArr <- triMobile[, .(triMobileN = sum(jours_n)), by=INSEE_COM]
mobilierArr <- mobilier[, .(mobilierN = .N), by=.(type,lib,INSEE_COM)]
mobilierArr <- dcast(mobilierArr,INSEE_COM ~ type)
dansMaRueArr <- dansMaRue[, .(dansMaRueN = .N), by=.(TYPE,SOUSTYPE,INSEE_COM)]
dansMaRueArr[grepl('rue', SOUSTYPE), TYPE := 'DEBORDRUE']
dansMaRueArr[grepl('verre', SOUSTYPE), TYPE := 'DEBORDVERRE']
dansMaRueArr <- dcast(dansMaRueArr,INSEE_COM ~ TYPE)
tonnageArr <- tonnage[, .(tonnageJaunes=sum(tonnageJaunes),tonnageVerre=sum(tonnageVerre),tonnageVerts=sum(tonnageVerts)),by=INSEE_COM]
arr <- merge(arr,triMobileArr)
arr <- merge(arr,mobilierArr)
arr <- merge(arr,dansMaRueArr)
arr <- merge(arr,tonnageArr)
arr@data[is.na(arr@data)] <- 0
# Iris --------------------------------------------------------------------
triMobileIris <- triMobile[, .(triMobileN = sum(jours_n)), by=CODE_IRIS]
mobilierIris <- mobilier[, .(mobilierN = .N), by=.(type,lib,CODE_IRIS)]
mobilierIris <- dcast(mobilierIris,CODE_IRIS ~ type)
dansMaRueIris <- dansMaRue[, .(dansMaRueN = .N), by=.(TYPE,SOUSTYPE,CODE_IRIS)]
dansMaRueIris[grepl('rue', SOUSTYPE), TYPE := 'DEBORDRUE']
dansMaRueIris[grepl('verre', SOUSTYPE), TYPE := 'DEBORDVERRE']
dansMaRueIris <- dcast(dansMaRueIris,CODE_IRIS ~ TYPE)
iris <- merge(iris,triMobileIris)
iris <- merge(iris,mobilierIris)
iris <- merge(iris,dansMaRueIris)
iris@data[is.na(iris@data)] <- 0
# Paris -------------------------------------------------------------------
paris <- data.table(arr@data)
paris <- paris[, lapply(.SD,sum), .SDcols=c('P13_POP','AREA','triMobileN','POU','POUP','PRE','VER','DEBORDRUE','DEBORDVERRE','tonnageJaunes','tonnageVerre','tonnageVerts')]
paris
paris <- data.table(arr@data)
22147/2229628
2229628/22147
paris
paris[, lapply(.SD,sum), .SDcols=c('P13_POP','AREA','triMobileN','POU','POUP','PRE','VER','DEBORDRUE','DEBORDVERRE','tonnageJaunes','tonnageVerre','tonnageVerts')]
mobilier$lib
unique(mobilier$lib)
paris[, lapply(.SD,sum), .SDcols=c('P13_POP','AREA','triMobileN','POU','POUP','PRE','VER','DEBORDRUE','DEBORDVERRE','tonnageJaunes','tonnageVerre','tonnageVerts')]
22147+2036+ 22+962
2229628/25167
2229628/22147
22147/105,4
22147/105.4
